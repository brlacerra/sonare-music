'use client'

import { useEffect, useState } from 'react'

export default function HashPage() {
  const [resultados, setResultados] = useState<ResultadoHash[]>([])

  useEffect(() => {
    fetch('/api/algoritmos/hashDesloc')
      .then((res) => res.json())
      .then(setResultados)
  }, [])

  return (
    <main className="p-6">
      <h1 className="text-3xl font-bold mb-4">üîê Hashing com Enla√ßamento Deslocado</h1>

      <p className="mb-6 text-gray-600">
        Os nomes dos usu√°rios foram convertidos para n√∫meros e inseridos em uma tabela hash de tamanho fixo
        utilizando <strong>fun√ß√£o hash por multiplica√ß√£o</strong> com enla√ßamento linear para resolver colis√µes.
      </p>

      <div className="overflow-x-auto rounded-lg shadow-md border border-gray-200">
        <table className="min-w-full bg-white text-sm text-left">
          <thead className="bg-gray-100 text-black uppercase">
            <tr>
              <th className="px-4 py-3">Nome</th>
              <th className="px-4 py-3">√çndice Original</th>
              <th className="px-4 py-3">√çndice Final</th>
              <th className="px-4 py-3">Colis√£o?</th>
            </tr>
          </thead>
          <tbody>
            {resultados.map((res, i) => (
              <tr key={i} className="border-t text-black hover:bg-gray-50">
                <td className="px-4 py-2">{res.chave}</td>
                <td className="px-4 py-2">{res.indiceOriginal}</td>
                <td className="px-4 py-2">{res.indiceFinal}</td>
                <td className="px-4 py-2">
                  {res.indiceOriginal === res.indiceFinal ? 'N√£o' : 'Sim'}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <details className="mt-8 bg-gray-50 border border-gray-300 rounded p-4">
        <summary className="cursor-pointer font-semibold text-gray-800">
          üìò Ver detalhes t√©cnicos
        </summary>
        <ul className="list-disc pl-6 mt-3 text-gray-700 text-sm space-y-2">
          <li>Tamanho da tabela hash: <code>31</code></li>
          <li>Constante de multiplica√ß√£o: <code>A = 0.6180339887</code> (aproxima√ß√£o de œÜ - 1)</li>
          <li>Convers√£o de strings para n√∫mero usa a f√≥rmula: <code>‚àë charCode * (posi√ß√£o + 1)</code></li>
          <li>Colis√µes s√£o resolvidas com deslocamento linear at√© achar posi√ß√£o vazia</li>
        </ul>
      </details>
    </main>
  )
}

// Tipo local para o cliente
type ResultadoHash = {
  chave: string;
  indiceOriginal: number;
  indiceFinal: number;
  colisao: boolean;
};
